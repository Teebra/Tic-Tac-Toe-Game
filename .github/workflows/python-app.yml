name: Python package

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest -v test.py

      - name: Trigger issue_create.yml on failure
        if: ${{ failure() }}
        uses: actions/github-script@v5
        with:
          script: |
            const octokit = new github.GitHub(github.token);
            await octokit.actions.createWorkflowDispatch({
              owner: github.context.repo.owner,
              repo: github.context.repo.repo,
              workflow_id: 'issue_create.yml',
              ref: github.context.sha
            });

  check_and_create_issue:

    needs: build
    if: ${{ needs.build.result == 'failure' }}
    
    runs-on: ubuntu-latest
    steps:
      - name: Check Workflow Status
        id: check_status
        run: echo "Workflow status is ${{ github.event.workflow_run.conclusion }}"
      
      - name: Create Issue
        if: ${{ steps.check_status.outputs.check_status != 'success' }}
        uses: actions/github-script@v5
        with:
          script: |
            const branchName = github.event.workflow_run.head_ref;
            const initiator = github.event.workflow_run.actor;

            const issueTitle = `Failure in ${branchName} initiated by ${initiator}`;
            const issueBody = `The workflow 'python-app.yml' failed in branch ${branchName}.`;
            
            const octokit = new github.GitHub(github.token);
            await octokit.issues.create({
              owner: github.context.repo.owner,
              repo: github.context.repo.repo,
              title: issueTitle,
              body: issueBody,
              assignees: ["Teebra", "cerrybin"] // Assign the issue to specific users
            });
